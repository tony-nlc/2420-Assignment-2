#!/bin/bash
# Filename: new_user
# Description: Create a new user with the following:
# - Specify a shell
# - Create home directory
# - Clone /etc/skel
# - Group configuration
# - Setup password
# Reference:
# [10] https://tldp.org/LDP/sag/html/adduser.html
# [11] https://opensource.com/article/19/12/help-bash-program
# [12] https://ss64.com/bash/getopts.html
# [13] https://www.cyberciti.biz/faq/understanding-etcpasswd-file-format/
# [14] https://www.cyberciti.biz/faq/understanding-etcgroup-file/
# [16] https://ss64.com/bash/awk.html
# [17] https://stackoverflow.com/questions/55877410/understanding-how-ofs-works-in-awk
# [18] https://stackoverflow.com/questions/9708028/awk-return-value-to-shell-script
# [19] https://stackoverflow.com/questions/70384448/how-should-i-use-if-else-statement-in-awk
# [20] https://unix.stackexchange.com/questions/136322/how-to-replace-the-content-of-a-specific-column-with-awk
# [21] https://www.cyberciti.biz/faq/understanding-etcshadow-file/

################################################################################
# Initiaiization                                                               #
################################################################################

# Initialize a default shell variable
shell="/bin/bash"
# Initialize a default string for groups
groups="wheel"
# Initialize a default info for user
info="Regular User"

################################################################################
# Error Handling                                                               #
################################################################################

# Check if the script is run by root privillege [8]
if [[ $EUID -ne 0 ]]; then
  # Print an error message
  echo "You need to 'sudo' this script"
  # Exit the script
  exit 1
fi

# Error handling Function for mkdir
make_directory() {
  # Check if directory does not exist [1]
  if ! [[ -d $1 ]]; then
    # Create directory if it doesnt exist
    mkdir $1
    echo "$1 is created"
  else
    # Print an error message
    echo Directory Already Exist in Path:$1
  fi
}

################################################################################
# Help                                                                         #
################################################################################

# Show the usage of the script [11]
show_help() {
  echo "Usage: $0 -u <username> -s <shell> -g <group1,group2,...> -i <User ID Info>"
  echo "  -u <username>           Username of the new user (required)"
  echo "  -s <shell>              User's shell (default: /bin/bash)"
  echo "  -g <group>              Comma-separated list of additional groups"
  echo "  -i <User ID Info>       Extra information about the user"
  exit 0
}

################################################################################
# Main program                                                                 #
################################################################################

# Parsing option arguments to variable [12]
while getopts ":u:s:g:i:h" opt; do
  case "${opt}" in
  # Passing $OPTARG to username variable
  u) username=$OPTARG ;;
  # Passing $OPTARG to shell variable
  s) shell=$OPTARG ;;
  # Passing $OPTARG to groups variable
  g) groups=$OPTARG ;;
  # Passing $OPTARG to info variable
  i) info=$OPTARG ;;
  # Print help message
  h) show_help ;;
  # Exit the function if they are missing an $OPTARG
  :)
    # Print An Error Message
    echo "Option Need A Argument"
    exit 1 
    ;;
  # Exit the function if user pass in invalid option
  ?) 
    # Print An Error Message
    echo "Not A Valid Option"
    exit 1 ;;
  esac
done

# Check is username is empty
if [[ -z "$username" ]]; then
  # Print an error message
  echo "Error: Username is required."
  # Print help message
  show_help
fi

# Check if username already exists in /etc/passwd
# awk -F: specifies to search and separate row by ":" [16]
# -v username="$username" specifies username we are looking up [16]
# $1 == username checks if first column is equal to username [19]
# print "User Found", returns a message [18]
# /etc/passwd is the file we are searching [13]
if [[ -n $(awk -F: -v username="$username" '$1 == username {print "Found"}' /etc/passwd) ]]; then
  # Print an error message showing username already exist
  echo "Username found in file"
  # Exit script
  exit 1
else
  # Print a success message
  echo "Valid Username"
fi

# Get the next avaliable UID
# awk -F: specifies to search and separate row by ":" [16]
# $3 >= 1000 && $3 <= 65533 specifies the range we are looking for [19]
# { if ($3 > max) max = $3 } Checks if third column UID column if larger than max a local variable [19]
# END specifies do the following action by the end [16]
# if (max >= 1000) checks if max >= 1000 [19]
# if yes, return the value max+1 [18]
# if no, return 1000 [18]
# /etc/passwd specifies the value we are looking for
uid=$(awk -F: '$3 >= 1000 && $3 <= 65533 { if ($3 > max) max = $3 } END { if (max >= 1000) print max+1; else print 1000 }' /etc/passwd)

# Get the next avaliable GID
# awk -F: specifies to search and separate row by ":" [16]
# $4 >= 1000 && $4 <= 65533 specifies the range we are looking for [19]
# { if ($4 > max) max = $4 } Checks if fourth column UID column if larger than max a local variable [19]
# END specifies do the following action by the end [16]
# if (max >= 1000) checks if max >= 1000 [19]
# if yes, return the value max+1 [18]
# if no, return 1000 [18]
# /etc/passwd specifies the value we are looking for
gid=$(awk -F: '$3 >= 1000 && $4 <= 65533 { if ($4 > max) max = $4 } END { if (max >= 1000) print max+1; else print 1000 }' /etc/passwd)

# Set a user_home variable [13]
user_home="/home/$username"
# Set a user_entry for /etc/passwd [13]
user_entry="$username:x:$uid:$gid:$info:$user_home:$shell"
# Append user_entry variable to /etc/passwd [13]
echo "$user_entry" >>/etc/passwd
# Append user_entry variable to /etc/shadow [21]
echo "$username:!*::::::" >>/etc/shadow
# Append user_entry variable to /etc/group [14]
echo "$username:x:$gid:" >>/etc/group

# Handle if user_home already exist
make_directory "$user_home"
# Copy skeleteon to user_home recursively [10]
cp -r /etc/skel/. "$user_home"
# Change ownership of user_home to user
chown -R "$username:$gid" "$user_home"
# Change access for user_home
chmod -R 751 "$user_home"

# Separate groups string into an array by comma
separated_groups=($(awk -F, '{for(i=1; i<=NF; i++) print $i}' <<<"$groups"))
# Loop over group in groups
for ((i = 0; i < ${#separated_groups[@]}; i++)); do
  # Check if group exists in /etc/group
  # awk -F: specifies to search and separate row by ":"
  # -v group="${separated_groups[i]}" specifies group name we are looking up
  # $1 == username checks if first column is equal to groupname
  # print "User Found", returns a message
  # /etc/passwd is the file we are searching
  if [[ -n $(awk -F: -v group="${separated_groups[i]}" '$1 == group {print "Found"}' /etc/group) ]]; then
    # specifies to search and separate row by ":"
    # -F: specifies separate by ":"
    # -v group="${groups[i]}" sepcifies the group we are editing
    # -v user="$username" specifies the username as variable
    # if ($1 == group) checks if the first column of the row matches to the group
    # if ($4 != "") checks if the fourth column of the row is not empty
    # $4 = $4 "," user appends our username to the fourth column
    # else if ($4 !~ "\\b" user "\\b") checks if column 4 do not have user variable's value in it
    # $4 = $4 "," user; append user variable's value to the fourth column
    # print $0 returns a new row if changed else the original row
    # >/etc/group.tmp will write the result to /etc/group.tmp which is temporary file store the edited /etc/group
    # && mv /etc/group.tmp /etc/group then rename /etc/group.tmp back to /etc/group
    # /etc/group is the file we are searching
    awk -F: -v group="${separated_groups[i]}" -v user="$username" 'BEGIN { OFS = ":" }
    {
      if ($1 == group) {
        if ($4 == "") {
          $4 = user;
        } else if ($4 !~ "\\b" user "\\b") {
          $4 = $4 "," user;
        }
      }
      print $0;
    }' /etc/group > /etc/group.tmp && mv /etc/group.tmp /etc/group
    # Print a success message
    echo "User $username added to group ${separated_groups[i]}"
  else
    echo "${separated_groups[i]} does not exist"
  fi
done

# Change password for that user
passwd $username